{
  "parser": "babel-eslint",
  "extends": "airbnb-base",
  "plugins": [
    "filenames"
  ],
  "rules": {
    "filenames/match-regex": 2,
    "filenames/match-exported": 0,
    "filenames/no-index": 2,
    // use tabs, not spaces, and in switch statements the case statement should indent again (the default is to be level with the switch)
    "indent": [ "error", "tab", { "SwitchCase": 1 } ],
    // if you want to put a blank line at the beginning or end of a block, knock yourself out
    "padded-blocks": [ "off" ],
    // i like tabs. besides, we set indent to require them
    "no-tabs": [ "off" ],
    // seriously, who cares if there's a blank line at the end of the file or not?
    "eol-last": [ "off" ],
    // sometimes having a long single line makes sense, this also seems buggy and inconsistent, so we ignore it
    "max-len": [ "off" ],
    // webstorm repeatedly tries to add it for us. it's easier not to fight it, even if it's not required.
    "strict": [ "off" ],
    // when setting the property of an object, you can specify the name even if it's unnecessary (ie: { foo: foo })
    "object-shorthand": [ "off" ],
    // unused vars are an error, except for function arguments.
    // particularly with callbacks we may not use all the args, but we still like knowing they're available
    "no-unused-vars": [ "error", { "vars": "all", "args": "none", "ignoreRestSiblings": true } ],
    // you don't have to use operator assignment if you don't want to
    "operator-assignment": [ "warn" ],
    // we don't want else to be on the same line as the closing } of an if statement
    "brace-style": [ "error", "stroustrup" ],
    // warn about overly complex code that you may want to refactor
    "complexity": [ "warn", 15 ],
    // it's possible that implicit coercion is not what you intended. webstorm warns about it, so should we
    "no-implicit-coercion": [ "warn" ],
    // if you're using 'this' somewhere that isn't a class you're probably doing something wrong
    "no-invalid-this": [ "error" ],
    // if you're not modifying the variable used in a loop condition, you've probably done something wrong...
    "no-unmodified-loop-condition": [ "warn" ],
    // don't use .call or .apply when you don't need to
    "no-useless-call": [ "warn" ],
    // we want to slap you if you don't update your jsdoc, but not necessarily break one of your fingers
    "valid-jsdoc": [ "warn" ],
    // forgetting to return after calling a callback is an easy mistake to make, so we'll warn you if you are
    "callback-return": [ "warn" ]
  }
}